--- /root/cm10.1/bootable/recovery/etc/init.rc
+++ /root/cm10.1-old/bootable/recovery/etc/init.rc
@@ -16,7 +16,6 @@
     mkdir /sdcard
     mkdir /internal_sd
     mkdir /external_sd
-    mkdir /sd-ext
     mkdir /datadata
     mkdir /emmc
     mkdir /system

--- /root/cm10.1/bootable/recovery/updater/updater.c
+++ /root/cm10.1-old/bootable/recovery/updater/updater.c
@@ -112,7 +112,7 @@
     sehandle = selabel_open(SELABEL_CTX_FILE, seopts, 1);
 
     if (!sehandle) {
-        fprintf(stderr, "Warning:  No file_contexts\n");
+        //fprintf(stderr, "Warning:  No file_contexts\n");
         // fprintf(cmd_pipe, "ui_print Warning: No file_contexts\n");
     }
 
--- /root/cm10.1/bootable/recovery/recovery.c
+++ /root/cm10.1-old/bootable/recovery/recovery.c
@@ -887,8 +887,8 @@
     sehandle = selabel_open(SELABEL_CTX_FILE, seopts, 1);
 
     if (!sehandle) {
-        fprintf(stderr, "Warning: No file_contexts\n");
-        ui_print("Warning:  No file_contexts\n");
+        //fprintf(stderr, "Warning: No file_contexts\n");
+        //ui_print("Warning:  No file_contexts\n");
     }
 
     LOGI("device_recovery_start()\n");

--- /root/cm10.1/external/webkit/Source/WebCore/platform/graphics/android/rendering/ShaderProgram.cpp
+++ /root/cm10.1-old/external/webkit/Source/WebCore/platform/graphics/android/rendering/ShaderProgram.cpp
@@ -153,7 +153,11 @@
 static const char gVideoFragmentShader[] =
     "#extension GL_OES_EGL_image_external : require\n"
     "precision mediump float;\n"
+#ifdef MISSING_EGL_EXTERNAL_IMAGE
+    "uniform sampler2D s_yuvTexture;\n"
+#else
     "uniform samplerExternalOES s_yuvTexture;\n"
+#endif
     "varying vec2 v_texCoord;\n"
     "void main() {\n"
     "  gl_FragColor = texture2D(s_yuvTexture, v_texCoord);\n"
@@ -164,7 +168,11 @@
     "precision mediump float;\n"
     "varying vec2 v_texCoord; \n"
     "uniform float alpha; \n"
+#ifdef MISSING_EGL_EXTERNAL_IMAGE
+    "uniform sampler2D s_texture;\n"
+#else
     "uniform samplerExternalOES s_texture; \n"
+#endif
     "void main() {\n"
     "  gl_FragColor = texture2D(s_texture, v_texCoord); \n"
     "  gl_FragColor *= alpha; "
@@ -176,7 +184,11 @@
     "varying vec2 v_texCoord; \n"
     "uniform float alpha; \n"
     "uniform float contrast; \n"
+#ifdef MISSING_EGL_EXTERNAL_IMAGE
+    "uniform sampler2D s_texture;\n"
+#else
     "uniform samplerExternalOES s_texture; \n"
+#endif
     "void main() {\n"
     "  vec4 pixel = texture2D(s_texture, v_texCoord); \n"
     "  float a = pixel.a; \n"

--- /root/cm10.1/frameworks/av/media/libstagefright/colorconversion/SoftwareRenderer.cpp
+++ /root/cm10.1-old/frameworks/av/media/libstagefright/colorconversion/SoftwareRenderer.cpp
@@ -65,6 +65,7 @@
     size_t bufWidth, bufHeight;
 
     switch (mColorFormat) {
+#ifndef MISSING_EGL_PIXEL_FORMAT_YV12
         case OMX_COLOR_FormatYUV420Planar:
         case OMX_TI_COLOR_FormatYUV420PackedSemiPlanar:
         {
@@ -77,6 +78,7 @@
 
             // fall through.
         }
+#endif
 
         default:
             halFormat = HAL_PIXEL_FORMAT_RGB_565;

--- /root/cm10.1/frameworks/native/libs/ui/GraphicBufferAllocator.cpp
+++ /root/cm10.1-old/frameworks/native/libs/ui/GraphicBufferAllocator.cpp
@@ -211,6 +211,15 @@
 
     // we have a h/w allocator and h/w buffer is requested
 
+#ifdef MISSING_EGL_PIXEL_FORMAT_YV12
+    if (format == HAL_PIXEL_FORMAT_YV12) {
+	format = HAL_PIXEL_FORMAT_RGBX_8888;
+    }
+    if (usage & GRALLOC_USAGE_EXTERNAL_DISP) {
+	usage ^= GRALLOC_USAGE_EXTERNAL_DISP;
+    }
+#endif
+
 #ifdef EXYNOS4_ENHANCEMENTS
     if ((format == 0x101) || (format == 0x105) || (format == 0x107)) {
         // 0x101 = HAL_PIXEL_FORMAT_YCbCr_420_P (Samsung-specific pixel format)

--- /root/cm10.1/frameworks/native/libs/ui/GraphicBufferMapper.cpp
+++ /root/cm10.1-old/frameworks/native/libs/ui/GraphicBufferMapper.cpp
@@ -75,10 +75,23 @@
 {
     ATRACE_CALL();
     status_t err;
+#ifdef MISSING_GRALLOC_BUFFERS
+    int tries=5;
+#endif
 
     err = mAllocMod->lock(mAllocMod, handle, usage,
             bounds.left, bounds.top, bounds.width(), bounds.height(),
             vaddr);
+#ifdef MISSING_GRALLOC_BUFFERS
+    while (err && tries) {
+	usleep(1000);
+        err = mAllocMod->unlock(mAllocMod, handle);
+        err = mAllocMod->lock(mAllocMod, handle, usage,
+            bounds.left, bounds.top, bounds.width(), bounds.height(),
+            vaddr);
+	tries--;
+    }
+#endif
 
     ALOGW_IF(err, "lock(...) failed %d (%s)", err, strerror(-err));
     return err;

--- /root/cm10.1/frameworks/native/opengl/include/GLES/glext.h
+++ /root/cm10.1-old/frameworks/native/opengl/include/GLES/glext.h
@@ -71,7 +71,12 @@
 /* GL_OES_EGL_image_external */
 #ifndef GL_OES_EGL_image_external
 /* GLeglImageOES defined in GL_OES_EGL_image already. */
+#ifdef MISSING_EGL_EXTERNAL_IMAGE
+#define GL_TEXTURE_EXTERNAL_OES                                 0x0DE1
+#else
 #define GL_TEXTURE_EXTERNAL_OES                                 0x8D65
+#endif
+#define GL_SAMPLER_EXTERNAL_OES                                 0x8D66
 #define GL_TEXTURE_BINDING_EXTERNAL_OES                         0x8D67
 #define GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES                     0x8D68
 #endif

--- /root/cm10.1/frameworks/native/opengl/include/GLES2/gl2ext.h
+++ /root/cm10.1-old/frameworks/native/opengl/include/GLES2/gl2ext.h
@@ -60,7 +60,11 @@
 /* GL_OES_EGL_image_external */
 #ifndef GL_OES_EGL_image_external
 /* GLeglImageOES defined in GL_OES_EGL_image already. */
+#ifdef MISSING_EGL_EXTERNAL_IMAGE
+#define GL_TEXTURE_EXTERNAL_OES                                 0x0DE1
+#else
 #define GL_TEXTURE_EXTERNAL_OES                                 0x8D65
+#endif
 #define GL_SAMPLER_EXTERNAL_OES                                 0x8D66
 #define GL_TEXTURE_BINDING_EXTERNAL_OES                         0x8D67
 #define GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES                     0x8D68

--- /root/cm10.1/frameworks/native/opengl/libagl/state.cpp
+++ /root/cm10.1-old/frameworks/native/opengl/libagl/state.cpp
@@ -192,9 +192,11 @@
         // these need to fall through into the rasterizer
         c->rasterizer.procs.enableDisable(c, cap, enabled);
         break;
+#ifndef MISSING_EGL_EXTERNAL_IMAGE
     case GL_TEXTURE_EXTERNAL_OES:
         c->rasterizer.procs.enableDisable(c, GL_TEXTURE_2D, enabled);
         break;
+#endif
 
     case GL_MULTISAMPLE:
     case GL_SAMPLE_ALPHA_TO_COVERAGE:

--- /root/cm10.1/frameworks/native/services/surfaceflinger/Layer.cpp
+++ /root/cm10.1-old/frameworks/native/services/surfaceflinger/Layer.cpp
@@ -782,7 +782,12 @@
         // need a hardware-protected path to external video sink
         usage |= GraphicBuffer::USAGE_PROTECTED;
     }
+#ifdef MISSING_GRALLOC_BUFFERS
+    usage |= GraphicBuffer::USAGE_HW_TEXTURE;
+#else
     usage |= GraphicBuffer::USAGE_HW_COMPOSER;
+#endif
+
     return usage;
 }
 
--- /root/cm10.1/hardware/libhardware_legacy/vibrator/Android.mk
+++ /root/cm10.1-old/hardware/libhardware_legacy/vibrator/Android.mk
@@ -1,6 +1,10 @@
 # Copyright 2006 The Android Open Source Project
 
-LOCAL_SRC_FILES += vibrator/vibrator.c
+ifeq ($(TARGET_DEVICE),gallo)
+    LOCAL_SRC_FILES += vibrator/vibrator_gallo.c
+else
+    LOCAL_SRC_FILES += vibrator/vibrator.c
+endif
 
 ## Must point to a source file that implements the sendit() function
 ifneq ($(BOARD_HAS_VIBRATOR_IMPLEMENTATION),)

--- /root/cm10.1/packages/apps/Camera/jni/feature_mos/src/mosaic_renderer/SurfaceTextureRenderer.cpp
+++ /root/cm10.1-old/packages/apps/Camera/jni/feature_mos/src/mosaic_renderer/SurfaceTextureRenderer.cpp
@@ -29,7 +29,11 @@
 };
 GLushort g_iIndices2[] = { 0, 1, 2, 3 };
 
+#ifdef MISSING_EGL_EXTERNAL_IMAGE
+const int GL_TEXTURE_EXTERNAL_OES_ENUM = 0x0DE1;
+#else
 const int GL_TEXTURE_EXTERNAL_OES_ENUM = 0x8D65;
+#endif
 
 const int VERTEX_STRIDE = 6 * sizeof(GLfloat);
 
@@ -177,7 +181,11 @@
         "#extension GL_OES_EGL_image_external : require\n"
         "precision mediump float;\n"
         "varying vec2 vTextureNormCoord;\n"
+#ifdef MISSING_EGL_EXTERNAL_IMAGE
+        "uniform sampler2D sTexture;\n"
+#else
         "uniform samplerExternalOES sTexture;\n"
+#endif
         "void main() {\n"
         "  gl_FragColor = texture2D(sTexture, vTextureNormCoord);\n"
         "}\n";

--- /root/cm10.1/packages/apps/Camera/jni/mosaic_renderer_jni.cpp
+++ /root/cm10.1-old/packages/apps/Camera/jni/mosaic_renderer_jni.cpp
@@ -166,7 +166,11 @@
     0.0, 1.0, 0.0,
     0.0, 0.0, 1.0};
 
+#ifdef MISSING_EGL_EXTERNAL_IMAGE
+const int GL_TEXTURE_EXTERNAL_OES_ENUM = 0x0DE1;
+#else
 const int GL_TEXTURE_EXTERNAL_OES_ENUM = 0x8D65;
+#endif
 
 static void printGLString(const char *name, GLenum s) {
     const char *v = (const char *) glGetString(s);

--- /root/cm10.1/packages/apps/Settings/res/values-zh-rCN/cm_strings.xml
+++ /root/cm10.1-old/packages/apps/Settings/res/values-zh-rCN/cm_strings.xml
@@ -660,7 +660,7 @@
     <string name="navring_action_torch">手电筒开关</string>
     <string name="navring_action_google_now">Google 即时</string>
     <string name="navring_choose_action_title">选择操作</string>
-    <string name="pie_control_title">扇行控制</string>
+    <string name="pie_control_title">扇形控制</string>
     <string name="pie_control_enabled">扩展桌面处于活动状态时启用</string>
     <string name="pie_control_disabled">已禁用</string>
     <string name="pie_control_sensitivity_title">响应度</string>

--- /root/cm10.1/vendor/cm/config/common.mk
+++ /root/cm10.1-old/vendor/cm/config/common.mk
@@ -209,7 +209,8 @@
 # Terminal Emulator
 PRODUCT_COPY_FILES +=  \
     vendor/cm/proprietary/Term.apk:system/app/Term.apk \
-    vendor/cm/proprietary/lib/armeabi/libjackpal-androidterm4.so:system/lib/libjackpal-androidterm4.so
+    vendor/cm/proprietary/lib/armeabi/libjackpal-androidterm5.so:system/lib/libjackpal-androidterm5.so \
+    vendor/cm/proprietary/lib/armeabi/libjackpal-termexec2.so:system/lib/libjackpal-termexec2.so
 
 PRODUCT_PROPERTY_OVERRIDES += \
     persist.sys.root_access=1


